{"version":3,"sources":["components/App/App.styled.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js"],"names":["Sections","styled","h1","Title","h2","Btn","button","ContBtn","div","StatItem","p","Container","Stat","Notification","h3","Section","title","children","FeedbackOptions","handleFeedback","options","Object","keys","map","option","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","message","App","state","handleIncrement","event","feedback","currentTarget","setState","prevState","handleIncrementTotal","handleIncrementPositive","positive","Math","round","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAGaA,EAAWC,IAAOC,GAAV,8BAGRC,EAAQF,IAAOG,GAAV,8BAGLC,EAAMJ,IAAOK,OAAV,qEAKHC,EAAUN,IAAOO,IAAV,4BAEPC,EAAWR,IAAOS,EAAV,8BAGRC,EAAYV,IAAOO,IAAV,gDAGTI,EAAOX,IAAOO,IAAV,8BAGJK,EAAeZ,IAAOa,GAAV,8B,OCNVC,MAff,YAAsC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACtB,OACI,8BACI,eAACjB,EAAD,WACKgB,EACCC,QCkBHC,MAvBf,YAAqD,IAA3BC,EAA0B,EAA1BA,eAAgBC,EAAU,EAAVA,QAGtC,OACI,8BACI,cAACb,EAAD,UACCc,OAAOC,KAAKF,GAASG,KAAI,SAAAC,GAAM,OAC1B,cAACnB,EAAD,CAAkBoB,KAAMD,EAAQE,QAASP,EAAzC,SAA0DK,GAAhDA,WCsBbG,MA5Bf,YAAiF,IAA3DC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,IAAKC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,mBAAoBC,EAAW,EAAXA,QACjE,OACI,gCACI,cAAC9B,EAAD,yBACW,IAATyB,GAAsB,IAARE,GAAyB,IAAZD,EACzB,eAACjB,EAAD,WACI,eAACH,EAAD,oBAAiBmB,KACjB,eAACnB,EAAD,sBAAmBoB,EAAnB,OACA,eAACpB,EAAD,mBAAgBqB,KAChB,eAACrB,EAAD,qBAAkBsB,KAClB,eAACtB,EAAD,iCAA8BuB,EAA9B,UAGR,cAACnB,EAAD,UAAgBoB,QCXPC,E,4MACnBC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPM,gBAAkB,SAACC,GACjB,IAAMC,EAAWD,EAAME,cAAcd,KACrC,EAAKe,UAAS,SAACC,GAAD,sBACXH,EAAWG,EAAUH,GAAY,O,EAItCI,qBAAuB,kBACpB,EAAKX,MAAQ,EAAKI,MAAMP,KAAO,EAAKO,MAAML,IAAM,EAAKK,MAAMN,S,EAE9Dc,wBAA0B,kBACvB,EAAKC,SAAWC,KAAKC,MAAO,EAAKX,MAAMP,KAAO,EAAKG,MAAS,M,4CAE/D,WACE,OACE,cAACpB,EAAD,UACE,eAAC,EAAD,CAASK,MAAO,wBAAhB,UACE,cAAC,EAAD,CACEG,eAAgB4B,KAAKX,gBACrBhB,QAAS2B,KAAKZ,QAEhB,cAAC,EAAD,CACEP,KAAMmB,KAAKZ,MAAMP,KACjBC,QAASkB,KAAKZ,MAAMN,QACpBC,IAAKiB,KAAKZ,MAAML,IAChBC,MAAOgB,KAAKL,uBACZV,mBAAoBe,KAAKJ,0BACzBV,QAAS,+B,GAlCYe,aCKlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d007f976.chunk.js","sourcesContent":["import styled from \"@emotion/styled\"\r\n\r\n\r\nexport const Sections = styled.h1`\r\n\r\n`\r\nexport const Title = styled.h2`\r\n\r\n`\r\nexport const Btn = styled.button`\r\nmargin-right: 10px;\r\nmargin-left: 10px;\r\n`\r\n\r\nexport const ContBtn = styled.div`\r\n`\r\nexport const StatItem = styled.p`\r\n\r\n`\r\nexport const Container = styled.div`\r\nmargin-left: 100px\r\n`\r\nexport const Stat = styled.div`\r\n\r\n`\r\nexport const Notification = styled.h3`\r\n\r\n`","import React from 'react'\r\nimport PropTypes from \"prop-types\"\r\nimport { Sections }  from \"../App/App.styled\"\r\n\r\nfunction Section({ title, children}) {\r\n    return (\r\n        <div>\r\n            <Sections>\r\n                {title}\r\n                { children}\r\n            </Sections>\r\n        </div>\r\n    )\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string\r\n}\r\n\r\nexport default Section\r\n","import React from 'react'\r\nimport  PropTypes  from \"prop-types\"\r\nimport { Btn, ContBtn } from \"../App/App.styled\"\r\n\r\nfunction FeedbackOptions({handleFeedback, options}) {\r\n     \r\n  \r\n    return (\r\n        <div>\r\n            <ContBtn>\r\n            {Object.keys(options).map(option=>(\r\n                  <Btn key={option} name={option} onClick={handleFeedback}>{option}</Btn>\r\n              )) } \r\n            </ContBtn>\r\n        </div>\r\n    )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    handleFeedback: PropTypes.func.isRequired,\r\n    options: PropTypes.shape({\r\n        good: PropTypes.number.isRequired,\r\n        neutral:PropTypes.number.isRequired,\r\n        bad: PropTypes.number.isRequired,\r\n    }).isRequired\r\n}\r\n\r\nexport default FeedbackOptions\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\"\r\nimport { Title, StatItem, Stat, Notification } from \"../App/App.styled\"\r\n\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage, message }) {\r\n    return (\r\n        <div>\r\n            <Title>Statistics</Title>\r\n            {(good !== 0 || bad !== 0 || neutral !== 0) ?\r\n                <Stat>\r\n                    <StatItem>Good: {good}</StatItem>\r\n                    <StatItem>Neutral {neutral}:</StatItem>\r\n                    <StatItem>Bad: {bad}</StatItem>\r\n                    <StatItem>Total: {total}</StatItem>\r\n                    <StatItem>Positive feedback: {positivePercentage}%</StatItem>\r\n                </Stat>\r\n                :\r\n            <Notification>{ message}</Notification>\r\n            }\r\n        </div>    \r\n    )\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Statistics\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Container } from \"./components/App/App.styled\";\nimport Section from \"./components/Section/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"./components/Statistics/Statistics\";\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = (event) => {\n    const feedback = event.currentTarget.name;\n    this.setState((prevState) => ({\n      [feedback]: prevState[feedback] + 1,\n    }));\n  };\n\n  handleIncrementTotal = () =>\n    (this.total = this.state.good + this.state.bad + this.state.neutral);\n\n  handleIncrementPositive = () =>\n    (this.positive = Math.round((this.state.good / this.total) * 100));\n\n  render() {\n    return (\n      <Container>\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions\n            handleFeedback={this.handleIncrement}\n            options={this.state}\n          ></FeedbackOptions>\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={this.handleIncrementTotal()}\n            positivePercentage={this.handleIncrementPositive()}\n            message={\"No feedback given\"}\n          ></Statistics>\n        </Section>\n      </Container>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}